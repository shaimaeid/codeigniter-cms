<h1><?php echo $title ; ?></h1><script>	Ext.onReady(function(){  		//vars		Ext.QuickTips.init(); 		var itemsPerPage = 20;		// Action toolbar		// ---- actions tool bar definition ---- //		var tbar1=new Ext.Toolbar({ items: [				{ text: 'Add record',				   iconCls:'icos-add',					tooltip:'Add new record',					handler: function() {						showform();      					}				},				{ text: 'Delete',					iconCls:'icos-cross',					tooltip:'Delete selected recoreds',					handler: function() {						var keys = grid.getSelectionModel().getSelection( ) ;						if (keys.length > 0)						{ 							id='';							Ext.each(grid.getSelectionModel().getSelection(), function(record){								id+=','+record.get('cats_field_id');										});							Ext.MessageBox.confirm('Confirm','Are you sure you wanna detele this record!',function (btn){									if(btn=='yes'){ 										del_record(id.substring(1));									}								},								this);						}					}				},				{ text: 'Print',					iconCls:'icos-printer',					tooltip:'Print topics',					handler: function() {						Ext.ux.grid.Printer.sitepath = '<?php echo ROOT_DIR ; ?>';						Ext.ux.grid.Printer.mainTitle='Tarbeet Web Site: <?php echo $title; ?>';						Ext.ux.grid.Printer.title = 'Tarbeet Web Site: <?php echo $title; ?>';						Ext.ux.grid.Printer.stylesheetPath = '<?php echo ROOT_DIR;?>css/Print.css';						Ext.ux.grid.Printer.printAutomatically = false;						Ext.ux.grid.Printer.print(grid);       					}				}			]});					// Search Items 		var id_srch=new Ext.form.TextField({			name: 'field_id',			width: 50,			emptyText:'ID',			hideLabel: true		});		var cat_name_en_srch=new Ext.form.TextField({			name_en: 'main_cat_name',			width: 100,			emptyText:'Category Name',			hideLabel: true		});			var name_en_srch=new Ext.form.TextField({			name_en: 'field_name_en',			width: 100,			emptyText:'English Name',			hideLabel: true		});			var name_ar_srch=new Ext.form.TextField({			name: 'field_name_ar',			width: 100,			emptyText:'Arabic Name',			hideLabel: true		});			//------------------------ Combo store		var main_cat_store = new Ext.data.JsonStore({			storeId: 'maincatStore',			autoLoad:true,			proxy: {				type: 'ajax',				url: 'custom_fields',				extraParams: {				action: 'get_main_cat'			},			actionMethods: 'POST',				reader: {					type: 'json',					root: 'results',					idProperty: 'main_cat_id'				}			},				fields: ['main_cat_id','main_cat_name']		});		var fields_store = new Ext.data.JsonStore({			storeId: 'fieldsStore',			autoLoad:true,			proxy: {				type: 'ajax',				url: 'custom_fields',				extraParams: {				action: 'get_fields'			},			actionMethods: 'POST',				reader: {					type: 'json',					root: 'results',					idProperty: 'field_id'				}			},				fields: ['field_id','field_name']		});		// The data store containing the list of types		var types = Ext.create('Ext.data.Store', {			fields: ['type', 'name'],			data : [				{"type":"text", "name":"text"},				{"type":"number", "name":"number"},				{"type":"date", "name":"date"}				//...			]		});		//----------------- Combo definitions		var main_cat_combo =Ext.create('Ext.form.ComboBox', {			width    : 100,			id:'mainCatCombo',			store: main_cat_store,			queryMode: 'local',			displayField: 'main_cat_name',			valueField: 'main_cat_id',			triggerAction: 'all',			allowBlank: false		});		var fields_combo =Ext.create('Ext.form.ComboBox', {			width    : 100,			id:'fieldsCombo',			store: fields_store,			queryMode: 'local',			displayField: 'field_name',			valueField: 'field_id',			triggerAction: 'all',			allowBlank: false		});		// Create the combo box, attached to the types data store		var type_combo =Ext.create('Ext.form.ComboBox', {			width    : 100,			id:'type_combo',			store: types,			queryMode: 'local',			displayField: 'name',			valueField: 'type',			triggerAction: 'all',			allowBlank: false		});				// ---- main store for the grid ---- //		var store = new Ext.data.JsonStore({			// store configs			storeId: 'myStore',			autoLoad: false,			customsize: itemsPerPage,			proxy: {				type: 'ajax',				url: 'custom_fields',				extraParams: {				action: 'get'			},			actionMethods: 'POST',				reader: {					type: 'json',					root: 'results',					idProperty: 'cats_field_id',					totalProperty: 'total'				}			},listeners: {						'beforeload': function(store, options) {							store.proxy.extraParams = { action: 'get',														id:id_srch.getValue(),														cat_name:cat_name_en_srch.getValue(),														name_en_srch:name_en_srch.getValue(),														name_ar_srch:name_ar_srch.getValue()													};						}					},			groupField: 'main_cat_name',				fields: ['cats_field_id','field_id','main_cat_id','main_cat_name','field_name_ar','field_name_en','is_required','type','field_name']		});				function requiredVal(val) {			if (val > 0) {				return '<span style="color:green;">✓</span>';			} else if (val <= 0) {				return '<span style="color:red;">✕</span>';			}			return val;		}				// grid		var wdth=Ext.getDom('grid_details').clientWidth-20;		var grid = new Ext.grid.Panel({			height: 580,			width:wdth,			renderTo: 'grid_details',			store: store,			id: 'grid',			selType: 'checkboxmodel',			selModel: {				mode: 'MULTI',   // or SINGLE, SIMPLE ... review API for Ext.selection.CheckboxModel				checkOnly: true    // or false to allow checkbox selection on click anywhere in row			},			plugins: [					Ext.create('Ext.grid.plugin.RowEditing', {						clicksToEdit: 2					})				],			features: [{ftype:'grouping'}],			anchor: '90%',				columns: [					{ 						text : 'Field ID',						width : 50,						sortable : true,						dataIndex: 'cats_field_id'					},					{						text     : 'Field Name',						width    : 150,						sortable : true,						flex:1,						dataIndex: 'field_id',						editor:fields_combo,						renderer:function(value, p, record, rowIndex, colIndex, ds) {								if(value>0){									return record.get('field_name');								}								else{									return '';								}							}					},					{						text     : 'Category Name',						width    : 150,						sortable : true,						flex:1,						dataIndex: 'main_cat_id',						editor:main_cat_combo,						renderer:function(value, p, record, rowIndex, colIndex, ds) {							  if(value>0){								return record.get('main_cat_name');								}								else{								 return '';								}							}					},					{ 						text : 'Field Arabic Name',						width : 200,						sortable : true,						dataIndex: 'field_name_ar',						editor: {								xtype: 'textfield',								allowBlank:false								}													},					{ 						text : 'Field English Name',						width : 200,						sortable : true,						dataIndex: 'field_name_en',						editor: {								xtype: 'textfield',								allowBlank:false								}													},					{ 						text : 'Required',						width : 150,						sortable : true,						dataIndex: 'is_required',						editor: {xtype: 'checkboxfield'},						renderer : requiredVal					},					{						text : 'Field type',						width : 200,						sortable : true,						dataIndex: 'type'					}									],			viewConfig: {				forceFit: true			},			dockedItems: [{					xtype: 'pagingtoolbar',					store: store,   // same store GridPanel is using					dock: 'bottom',					displayInfo: true				},				tbar1,				{					xtype: 'toolbar',					dock: 'top',					items:						[							{								xtype: 'label',								forId: 'myFieldId',								text: 'Filters:',								margins: '0'							},							id_srch,							cat_name_en_srch,							name_ar_srch,							name_en_srch,							{ 								text: 'Search',								iconCls:'icos-search',								handler: function() {									grid.child('pagingtoolbar').moveFirst();									store.reload({										params:{											start:0,											limit: itemsPerPage,											id:id_srch.getValue(),											cat_name:cat_name_en_srch.getValue(),											name_en_srch:name_en_srch.getValue(),											name_ar_srch:name_ar_srch.getValue()										}									});												}								},							{								text: 'Clear filters',								iconCls:'icos-trash',								handler: function() {								grid.child('pagingtoolbar').moveFirst();								id_srch.setValue(null);								cat_name_en_srch.setValue(null);								name_en_srch.setValue(null);								name_ar_srch.setValue(null);								store.load({									params:{										start:0,										limit: itemsPerPage									}								});  													  }							}						]				},							]		});		store.load({			params:{				start:0,				limit: itemsPerPage			}		});			// ------------------------------------- FUNCTIONS		//add new record window code		function showform(){		//----------------- Combo definitions		var main_cat =Ext.create('Ext.form.ComboBox', {			fieldLabel: 'Main Category *:',			width    : 100,			store: main_cat_store,			queryMode: 'remote',			displayField: 'main_cat_name',			valueField: 'main_cat_id',			emptyText:'Main Category',			triggerAction: 'all',			name : 'main_cat',			allowBlank: false,			listeners: {				'select': function(cmb, rec, idx) {				  var x =this.getValue();				   myForm.getForm().findField('main_cat_id').setValue(x);					}				}		});		var fields_cat =Ext.create('Ext.form.ComboBox', {			fieldLabel: 'Custom Field *:',			width    : 100,			store: fields_store,			queryMode: 'remote',			displayField: 'field_name',			valueField: 'field_id',			emptyText:'Custom Field',			triggerAction: 'all',			name : 'field_id',			allowBlank: false,			listeners: {				'select': function(cmb, rec, idx) {				  var x =this.getValue();				   myForm.getForm().findField('field_id').setValue(x);					}				}		});		var myForm = new Ext.FormPanel({			url: 'custom_fields',			baseParams: {				action: 'insert'			},			frame: true,			bodyStyle: '',			width: 320,			layout: 'form',			method: 'POST',			items: [				main_cat,				fields_cat,				{					xtype: 'textfield',					fieldLabel: 'Arabic name *',					width:'190',					name: 'name_ar',					allowBlank: false				},				{					xtype: 'textfield',					fieldLabel: 'English name *',					width:'190',					name: 'name_en',					allowBlank: false				},				{					xtype: 'radiogroup',					fieldLabel: 'Required',					columns: 2,					itemId: 'Required',					items: [						{							xtype: 'radiofield',							boxLabel: 'Yes',							name: 'required',							inputValue: '1',							checked: true						},						{							xtype: 'radiofield',							boxLabel: 'No',							name: 'required',							inputValue: '0'						}					]				}			]		});		var win = new Ext.Window({			title: 'Add new record',			id: 'formanchor-win', 			width: 400, 			height: 250, 			plain: true, 			layout: 'fit', 			border: false, 			closable: false, 			items:myForm,			buttons: [{						text: 'Add record',						handler: function(){							if(myForm.getForm().isValid()){								myForm.getForm().submit								({									success: function(form, action) {										var text =  action.result.msg;										Ext.Msg.alert('Done',text);										store.reload();									}, 									failure: function(form, action) {										var text =  action.result.err										Ext.Msg.alert('Error',text);									}								});							}							else {								Ext.Msg.alert('Error','Please, Insert all the obligatory fields.');								myForm.getForm().show();							}							win.close();						}					},					{						text: 'Reset',						handler: function(){							myForm.getForm().reset();						}					},					{						text: 'Close',						handler: function(){							win.close();						}					}				]		});		win.show();		};		// Edit selected record		grid.on('beforeedit', function(editor, e) {	});		grid.on('edit', function(editor, e) {			Ext.Ajax.request({				url: 'custom_fields',				params: {					action: 'update',					field_cat_id:e.record.get("cats_field_id"),					field_id:e.record.get("field_id"),					main_cat_id:e.record.get("main_cat_id"),					type:e.record.get("type"),					field_name_ar:e.record.get("field_name_ar"),					field_name_en:e.record.get("field_name_en"),					is_required:e.record.get("is_required")				},				success: function(response){					var text = Ext.decode(response.responseText).msg;					Ext.Msg.alert('Update',text);					store.reload();					}			});		});		// delete selected record	function del_record(id){		Ext.Ajax.request({			url: 'custom_fields',			params: {				action: 'delete',				id:id			},			success: function(response){				var text = Ext.decode(response.responseText).msg;				Ext.Msg.alert('Delete',text);				store.reload();			}		});	}		});</script><div id="grid_details"></div>